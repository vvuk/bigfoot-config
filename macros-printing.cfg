#
# Start, End, Cancel print macros
#

[gcode_macro COMPUTE_TOOL_OFFSETS]
gcode:
  INITIALIZE_TOOLCHANGER
  _REQUIRE_HOMED

  # always start with T0, and reset and re-home
  SELECT_TOOL T=0

  # reset all this
  SET_GCODE_OFFSET X=0 Y=0 Z=0
  BIGFOOT_SET_TOOL_OFFSET TOOL=T0 X=0 Y=0 Z=0

  # re-home
  G28 Z
  _ADJUST_Z_HOME_FOR_TOOL_OFFSET # TODO: this should happen after every home but I don't want to deal with a homing_override atm

  CENTER
  SELECT_TOOL T=0 # we should already be T0..
  PROBE
  BIGFOOT_SCAN PASSES=5
  # We have to use Z from probe here, because _ADJUST_Z_HOME_FOR_TOOL_OFFSET broke the probe values/Z values relationship,
  # and we need this value to be something we can relate to the next tool
  BIGFOOT_SET_REFERENCE Z_USE_PROBE=1

  CENTER
  SELECT_TOOL T=1 ASSUME_ACTIVE_TOOL_Z_OFFSET=0.0
  PROBE
  BIGFOOT_SCAN PASSES=5 Z_USE_PROBE=1
  BIGFOOT_SET_TOOL_OFFSET TOOL=T1

  # Go back to T0 without touching offsets so we have a clean slate,
  # but with T1 and beyond offsets properly set
  SELECT_TOOL T=0 ASSUME_ACTIVE_TOOL_Z_OFFSET=0.0

  CENTER

  SELECT_TOOL T=1
  G4 S15
  SELECT_TOOL T=0
  G4 S15


[gcode_macro START_PRINT]
gcode:
  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
  {% set target_chamber = params.CHAMBER|default("40")|int %}
  {% set low_temp_bed_soak_min = params.LOW_TEMP_SOAK_MIN|default("0")|int %}
  {% set high_temp_bed_soak_min = params.HIGH_TEMP_SOAK_MIN|default("25")|int %}
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}
  {% set have_chamber_thermistor = False %}
  {% set initial_tool = params.TOOL|default("0")|int %}
  {% set tc = printer['toolchanger'] %}

  INITIALIZE_TOOLCHANGER
  _REQUIRE_HOMED

  # always start with T0, and reset and re-home
  SELECT_TOOL T=0
  SET_GCODE_OFFSET X=0 Y=0 Z=0
  BIGFOOT_SET_TOOL_OFFSET TOOL=T0 X=0 Y=0 Z=0

  G90
  #SMART_PARK

  CLEAR_PAUSE
  ###BED_MESH_CLEAR

  # Checks if the bed temp is higher than 90c - if so then trigger a heatsoak.
  STATUS_HEATING
  {% if target_bed > 90 %}
    M106 S100 # Part cooling fan to help with moving air around the chamber
    #SET_PIN PIN=nevermore VALUE=1 # Turn on chamber fan
    M190 S{target_bed}
    {% if have_chamber_thermistor %}
      SET_DISPLAY_TEXT MSG="Bed to {target_chamber}C"
      TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}   # Waits for chamber to reach desired temp
    {% else %}
      SET_DISPLAY_TEXT MSG="Soak: {high_temp_bed_soak_min}m @ {target_bed}C"
      G4 P{ high_temp_bed_soak_min * 60000 }
    {% endif %}
  {% else %}
    SET_DISPLAY_TEXT MSG="Bed to {target_bed}C"
    M190 S{target_bed}
    {% if low_temp_bed_soak_min > 0 %}
      SET_DISPLAY_TEXT MSG="Soak: {low_temp_bed_soak_min}m @ {target_bed}C"
      G4 P{ low_temp_bed_soak_min * 60000 }
    {% endif %}
  {% endif %}

  # This is done by _REQUIRE_HOMED at the very start.
  # ... but with a cold bed? TODO?
  #STATUS_LEVELING
  #Z_TILT_ADJUST
  #QUAD_GANTRY_LEVEL

  # Clean at reasonable temp
  # TODO need clean 
  #  STATUS_CLEANING
  #  _CLEAN_NOZZLE TEMP=200 END_TEMP=150

  # Home Z again after QGL and cleaning
  STATUS_HOMING
  G28 Z
  _ADJUST_Z_HOME_FOR_TOOL_OFFSET # TODO: this should happen after every home but I don't want to deal with a homing_override atm

  CENTER
  SELECT_TOOL T=0
  PROBE
  BIGFOOT_SCAN PASSES=5
  # We have to use Z from probe here, because _ADJUST_Z_HOME_FOR_TOOL_OFFSET broke the probe values/Z values relationship,
  # and we need this value to be something we can relate to the next tool
  BIGFOOT_SET_REFERENCE Z_USE_PROBE=1

  CENTER
  SELECT_TOOL T=1 ASSUME_ACTIVE_TOOL_Z_OFFSET=0.0
  PROBE
  BIGFOOT_SCAN PASSES=5 Z_USE_PROBE=1
  BIGFOOT_SET_TOOL_OFFSET TOOL=T1

  # Go back to T0 without touching offsets so we have a clean slate,
  # but with T1 and beyond offsets properly set
  SELECT_TOOL T=0 ASSUME_ACTIVE_TOOL_Z_OFFSET=0.0

#  SET_DISPLAY_TEXT MSG="Tappy tap"
#  CENTER # this is center of parts during a print
#  PROBE_EDDY_NG_TAP

#  STATUS_MESHING
#  #BED_MESH_CALIBRATE ADAPTIVE=1 #METHOD=RAPID_SCAN
#  EDDYNG_BED_MESH_EXPERIMENTAL ADAPTIVE=1

#  STATUS_READY
#  SMART_PARK

  STATUS_HEATING
  RESPOND MSG="Setting extruder temperatures..."
  {% for tnum in range(8) %}
    {% set ttemp = params.get("T"~tnum~"_TEMP", "0")|float %}
    {% if ttemp > 0 %}
      RESPOND MSG="T{tnum}: {ttemp}C"
      M104 T{tnum} S{ttemp}
    {% endif %}
  {% endfor %}

  M107  # Turns off partcooling fan
  RESPOND MSG="Initial Tool {initial_tool}"
  SELECT_TOOL T={initial_tool}
  SMART_PARK

  {% if initial_tool == 0 %}
    _WAIT_FOR_TEMP_WITHIN_TOLERANCE HEATER=extruder TOLERANCE=3
  {% else %}
    _WAIT_FOR_TEMP_WITHIN_TOLERANCE HEATER=extruder{initial_tool} TOLERANCE=3
  {% endif %}

  STATUS_PRINTING
  LINE_PURGE

[gcode_macro END_PRINT]
gcode:
  {% set min_x = printer.toolhead.axis_minimum.x | float %}
  {% set max_y = printer.toolhead.axis_maximum.y | float %}
  {% set max_z = printer.toolhead.axis_maximum.z | float %}

  RESPOND TYPE=echo MSG='END_PRINT start'

  {% set z_hop_safe = [15.0, max_z-printer.toolhead.position.z] | min %}
  M400 ; wait for buffer to clear
  G91 ; relative positioning
  G0 Z{z_hop_safe} F3600 ; move nozzle up
  G92 E0 ; zero the extruder
  G1 E-10.0 F2000 ; retract filament

  ; turn off extruder heaters
  {% for tnum in range(2) %}
    M104 T{tnum} S0
  {% endfor %}
  M140 S0 ; turn off bed

  G90 ; absolute positioning
  G1 X{min_x+3.0} Y{max_y-3.0} F9000 ; move nozzle to top left
  G92 E0 ; zero extruder again
  G1 E-5.0 F300 ; retract a bit more, slowly, to avoid dribbles

  _ALL_FAN_OFF
  M84 ; Disable all steppers
  
  RESPOND TYPE=echo MSG='END_PRINT end'

  PROBE_EDDY_NG_SET_TAP_OFFSET VALUE=0.0
  BED_MESH_CLEAR
  
  STATUS_READY

[gcode_macro CANCEL_PRINT]
description: 
rename_existing: CANCEL_PRINT_BASE
gcode:
  {% set min_x = printer.toolhead.axis_minimum.x | float %}
  {% set max_y = printer.toolhead.axis_maximum.y | float %}
  {% set max_z = printer.toolhead.axis_maximum.z | float %}
  {% set z_hop_safe = [15.0, max_z-printer.toolhead.position.z] | min %}
  {% set e_restract = 10.0|float %}
  {% set e_mintemp = printer.configfile.settings['extruder'].min_extrude_temp %}

  M117 Cancelling...
  CANCEL_PRINT_BASE

  G91 # relative
  {% if printer.extruder.temperature >= e_mintemp %}
    G1 E-{e_restract} F500
  {% endif %}
  G0 Z{z_hop_safe} F3600 ; move nozzle up

  G90
  G1 X{min_x} Y{max_y} F9000

  TURN_OFF_HEATERS
  _ALL_FAN_OFF
  CLEAR_PAUSE
  M84

  M117 Print cancelled.
  {action_respond_info("Print cancelled.")}

